{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/swoleengineer/projects/learn-next/pages/index.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nvar PostLink = function PostLink(props) {\n  return __jsx(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 3\n    }\n  }, __jsx(Link, {\n    href: \"/p/[id]\",\n    as: \"/p/\".concat(props.id),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, props.title)));\n};\n\nvar Index = function Index(props) {\n  var _props$shows = props.shows,\n      shows = _props$shows === void 0 ? [] : _props$shows;\n\n  if (!shows.length) {\n    return __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 12\n      }\n    }, \" Hello still waiting \");\n  }\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"Batman TV Shows\"), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, shows.map(function (show) {\n    var name = show.name,\n        showId = show.id;\n    return __jsx(PostLink, {\n      key: showId,\n      id: showId,\n      title: name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    });\n  })));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context.abrupt(\"return\", {\n            shows: data.map(function (entry) {\n              return entry.show;\n            })\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/swoleengineer/projects/learn-next/pages/index.js"],"names":["Layout","Link","fetch","PostLink","props","id","title","Index","shows","length","map","show","name","showId","getInitialProps","res","json","data","console","log","entry"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,WAAV;AAAuB,IAAA,EAAE,eAAQA,KAAK,CAACC,EAAd,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,KAAK,CAACE,KAAV,CADF,CADF,CADoB;AAAA,CAAtB;;AAQA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAH,KAAK,EAAK;AAAA,qBACCA,KADD,CACdI,KADc;AAAA,MACdA,KADc,6BACN,EADM;;AAEtB,MAAI,CAACA,KAAK,CAACC,MAAX,EAAmB;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD;;AAED,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACE,GAAN,CAAU,UAAAC,IAAI,EAAI;AAAA,QACTC,IADS,GACYD,IADZ,CACTC,IADS;AAAA,QACCC,MADD,GACYF,IADZ,CACHN,EADG;AAEjB,WACE,MAAC,QAAD;AACE,MAAA,GAAG,EAAEQ,MADP;AAEE,MAAA,EAAE,EAAEA,MAFN;AAGE,MAAA,KAAK,EAAED,IAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD,GATA,CADH,CAFF,CADF;AAiBD,CAvBD;;AAyBAL,KAAK,CAACO,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACJZ,KAAK,CAAC,8CAAD,CADD;;AAAA;AAChBa,UAAAA,GADgB;AAAA;AAAA,2CAEHA,GAAG,CAACC,IAAJ,EAFG;;AAAA;AAEhBC,UAAAA,IAFgB;AAGtBC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACR,MAA9C;AAHsB,2CAIf;AACLD,YAAAA,KAAK,EAAES,IAAI,CAACP,GAAL,CAAS,UAAAU,KAAK;AAAA,qBAAIA,KAAK,CAACT,IAAV;AAAA,aAAd;AADF,WAJe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AASA,eAAeJ,KAAf","sourcesContent":["import Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nconst PostLink = props => (\n  <li>\n    <Link href={`/p/[id]`} as={`/p/${props.id}`}>\n      <a>{props.title}</a>\n    </Link>\n  </li>\n);\n\nconst Index = props =>  {\n  const { shows = [] } = props;\n  if (!shows.length) {\n    return <span> Hello still waiting </span>\n  }\n\n  return (\n    <Layout>\n      <h1>Batman TV Shows</h1>\n      <ul>\n        {shows.map(show => {\n          const { name, id: showId } = show;\n          return (\n            <PostLink\n              key={showId}\n              id={showId}\n              title={name}\n            />\n          );\n        })}\n      </ul>\n    </Layout>\n  );\n}\n\nIndex.getInitialProps = async function() {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n  console.log(`Show data fetched. Count: ${data.length}`);\n  return {\n    shows: data.map(entry => entry.show)\n  };\n}\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}